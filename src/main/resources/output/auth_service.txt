### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\AuthServiceApplication.java ###
package com.jh.tds.as;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
//@ComponentScan(basePackages = {"com.js.tds.as.*"})
public class AuthServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(AuthServiceApplication.class, args);
	}

}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\config\SecurityConfig.java ###
package com.jh.tds.as.config;


import com.jh.tds.as.util.JwtAuthenticationFilter;
import com.jh.tds.as.util.JwtUtil;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final JwtUtil jwtUtil;

    public SecurityConfig(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    // Bean for Password Encoder
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // AuthenticationManager bean for authentication
    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        System.out.println("inside authenticationManager");
        return http.getSharedObject(AuthenticationManagerBuilder.class).build();
    }

    // HTTP security configuration to secure endpoints
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        System.out.println("Inside securityFilterChain-->> "+http);
        http
                .csrf(AbstractHttpConfigurer::disable)  // Disable CSRF explicitly in Spring Security 6.x
                .authorizeRequests(authz -> authz
                        .requestMatchers("/api/auth/**").permitAll()  // Allow access to authentication routes
                        .anyRequest().authenticated() // All other requests must be authenticated
                )
                .addFilterBefore(new JwtAuthenticationFilter(jwtUtil), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\controller\AuthController.java ###
package com.jh.tds.as.controller;

import com.jh.tds.as.model.AuthRequest;
import com.jh.tds.as.model.AuthResponse;
import com.jh.tds.as.service.AuthService;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private final AuthService authService;

    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    @PostMapping("/login")
    public AuthResponse login(@RequestBody AuthRequest request) {
        System.out.println("Inside login-->> " + request);
        List<SimpleGrantedAuthority> list = Collections.singletonList(new SimpleGrantedAuthority(request.getRole().toUpperCase()));
        return authService.authenticateUser(request,list);
    }

    // Logout by clearing the Security Context
    @PostMapping("/logout")
    public String logout() {
        System.out.println("Inside logout method");
        SecurityContextHolder.clearContext(); // Clear the authentication context
        return "Logged out successfully";
    }

    @PostMapping("/isTokenExpired")
    public boolean isTokenExpired(@RequestHeader("Authorization") String token) {
        try {
            System.out.println("Original token: " + token);
            // Remove "Bearer " prefix and trim whitespace
            token = token.replace("Bearer ", "").trim();
            System.out.println("Processed token: " + token);

            return authService.isTokenExpired(token);
        } catch (Exception e) {
            System.err.println("Error in isTokenExpired: " + e.getMessage());
            return true; // Treat as expired if an error occurs
        }
    }


    @PostMapping("/refresh")
    public AuthResponse refresh(@RequestHeader("Authorization") String oldToken) {
        try {
            System.out.println("Original token: " + oldToken);
            // Remove "Bearer " prefix and trim whitespace
            oldToken = oldToken.replace("Bearer ", "").trim();
            System.out.println("Processed token: " + oldToken);

            return authService.refreshToken(oldToken);
        } catch (Exception e) {
            System.err.println("Error in refresh: " + e.getMessage());
            throw new RuntimeException("Error refreshing token", e);
        }
    }

    @PostMapping("/verify")
    public boolean verifyToken(@RequestHeader("Authorization") String token) {
        token = token.replace("Bearer ", "").trim();
        return authService.isTokenValid(token);
    }


}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\exception\ErrorResponse.java ###
package com.jh.tds.as.exception;

public class ErrorResponse {
    private String message;
    private int status;

    // Constructor
    public ErrorResponse(String message, int status) {
        this.message = message;
        this.status = status;
    }

    // Getters and setters
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\exception\GlobalExceptionHandler.java ###
package com.jh.tds.as.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(UserNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {
        // Create a structured error response using the ErrorResponse class
        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage(), HttpStatus.NOT_FOUND.value());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
    }

    @ExceptionHandler(InvalidCredentialsException.class)
    public ResponseEntity<ErrorResponse> handleInvalidCredential(InvalidCredentialsException ex) {
        // Create a structured error response using the ErrorResponse class
        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage(), HttpStatus.UNAUTHORIZED.value());
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
    }

    // Handle other exceptions
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {
        // Handle any other generic exceptions
        ErrorResponse errorResponse = new ErrorResponse("An unexpected error occurred.", HttpStatus.INTERNAL_SERVER_ERROR.value());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
    }

}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\exception\InvalidCredentialsException.java ###
package com.jh.tds.as.exception;

public class InvalidCredentialsException extends RuntimeException {
    public InvalidCredentialsException(String message) {
        super(message);
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\exception\UserNotFoundException.java ###
package com.jh.tds.as.exception;

public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\model\AuthRequest.java ###
// AuthRequest.java
package com.jh.tds.as.model;

public class AuthRequest {
    private String username;
    private String password;
    private String role;

    // Getters and Setters

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\model\AuthResponse.java ###
package com.jh.tds.as.model;

/**
 * @author Veeresh N
 * @version 1.0
 */
public class AuthResponse {
    private String token;

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\model\User.java ###
package com.jh.tds.as.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "users")
public class User {

    @Id
    private String id;
    @Indexed(unique = true) // Unique user ID
    private String userName;            // Unique username for login
    private String password;        // Hashed password for authentication
    private String emailId;               // User's email address
    private String firstName;           // First name of the user
    private String lastName;            // Last name of the user
    private String role;                //role - USER and Manager
    private String status;              // Status of the user (ACTIVE, INACTIVE)
    private String departmentId;        // Reference to the department the user belongs to (Many-to-One)

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getDepartmentId() {
        return departmentId;
    }

    public void setDepartmentId(String departmentId) {
        this.departmentId = departmentId;
    }
}


### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\repository\UserRepository.java ###
package com.jh.tds.as.repository;


import com.jh.tds.as.model.User;
import org.springframework.data.mongodb.repository.MongoRepository;

public interface UserRepository extends MongoRepository<User, String> {
    User findByUserName(String userName);

}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\service\AuthService.java ###
package com.jh.tds.as.service;

import com.jh.tds.as.exception.InvalidCredentialsException;
import com.jh.tds.as.exception.UserNotFoundException;
import com.jh.tds.as.model.AuthRequest;
import com.jh.tds.as.model.AuthResponse;
import com.jh.tds.as.model.User;
import com.jh.tds.as.repository.UserRepository;
import com.jh.tds.as.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AuthService {

    private final JwtUtil jwtUtil;

    @Autowired
    UserRepository userRepository;

    public AuthService(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    public AuthResponse authenticateUser(AuthRequest request, List<SimpleGrantedAuthority> roles) {
        System.out.println("Inside authenticateUser, roles-->> " + roles);
        User details = getUserDetailsByUserName(request.getUsername());
        if (details.getUserName().equals(request.getUsername()) && details.getPassword().equals(request.getPassword())) {
            System.out.println("Inside authenticateUser, generic userDetails-->> " + request.getUsername());
            return getAuthResponse(request.getUsername(), roles);
        }
        throw new InvalidCredentialsException("Invalid credentials");
    }

    private AuthResponse getAuthResponse(String userName, List<SimpleGrantedAuthority> roles) {
        System.out.println("Inside getAuthResponse, userName-->> " + userName);
        String token = jwtUtil.generateToken(userName, roles);
        AuthResponse authResponse = new AuthResponse();
        authResponse.setToken(token);
        return authResponse;
    }

    public AuthResponse refreshToken(String oldToken) {
        String username = jwtUtil.extractUsername(oldToken);
        List<SimpleGrantedAuthority> roles = jwtUtil.extractRoles(oldToken);
        AuthResponse authResponse = new AuthResponse();
        String refreshToken = jwtUtil.generateToken(username, roles);
        authResponse.setToken(refreshToken);
        return authResponse;
    }

    public boolean isTokenExpired(String token) {
        System.out.println("in service of isTokenExpired method..");
        return jwtUtil.isTokenExpired(token);
    }

    public boolean isTokenValid(String token) {
        try {
            jwtUtil.validateToken(token); // Assuming validateToken throws an exception if invalid
            return true;
        } catch (Exception e) {
            System.err.println("Token validation failed: " + e.getMessage());
            return false;
        }
    }

    private User getUserDetailsByUserName(String userName) {
        User userDetails = userRepository.findByUserName(userName);
        System.out.println("userDetails : " + userDetails);
        if (userDetails == null) {
            // If the userDetails doesn't exist, throw an exception
            throw new UserNotFoundException("User " + userName + " is not found.");
        }
        return userDetails;
    }

}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\util\JwtAuthenticationFilter.java ###
package com.jh.tds.as.util;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    public JwtAuthenticationFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String path = request.getRequestURI();
        System.out.println("Processing request for path: " + path);

        if (shouldNotFilter(request)) {
            System.out.println("Skipping filter for path: " + path);
            filterChain.doFilter(request, response);
            return;
        }

        String token = extractToken(request);
        if (token != null && jwtUtil.validateToken(token)) {
            String username = jwtUtil.extractUsername(token);
            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                var authentication = new UsernamePasswordAuthenticationToken(username, null, jwtUtil.extractRoles(token));
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }

        }

        filterChain.doFilter(request, response);  // Proceed to the next filter in the chain
    }
    // Extract token from Authorization header
    private String extractToken(HttpServletRequest request) {
        String header = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (header != null && header.startsWith("Bearer ")) {
//            return header.substring(7);  // Remove "Bearer " prefix
            return header.split(" ")[1].trim();
        }
        return null;
    }
    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        String path = request.getRequestURI();
        // Exclude /api/auth/** from JWT validation
        return path.startsWith("/api/auth/");
    }
}

### Contents of D:\workspace\auth-service\src\main\java\com\jh\tds\as\util\JwtUtil.java ###
package com.jh.tds.as.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JwtUtil {
    //    @Value("${jwt.secret}")
    private final String SECRET_KEY = "sh2+3JRuzIaVMCGxBPeDMSzUFwDBLscv4R77LYntGns=";
    private final Key secretKey = Keys.hmacShaKeyFor(Base64.getDecoder().decode(SECRET_KEY));

    // Generate a JWT token with the given username
    public String generateToken(String username, List<SimpleGrantedAuthority> authorities) {
        System.out.println("generateToken --->>> " + username);
        System.out.println("secretKey --->>> " + secretKey);
        Claims claims = Jwts.claims().setSubject(username);
        claims.put("roles", authorities.stream().map(SimpleGrantedAuthority::getAuthority).collect(Collectors.toList()));
        // 1 hour in milliseconds
        long expirationTime = 1000 * 60 * 60;

        return Jwts.builder().setClaims(claims)
//                .setSubject(username)
                .setIssuedAt(new Date()).setExpiration(new Date(System.currentTimeMillis() + expirationTime)).signWith(secretKey)  // Use the generated secure key to sign the token
                .compact();
    }

    public boolean isTokenExpired(String oldToken) {
        try {
            System.out.println("Received Token: " + oldToken);  // Log the token to verify format
            oldToken = oldToken.trim();
            Claims claims = extractClaims(oldToken);
            return claims.getExpiration().before(new Date());
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Error extracting claims or checking expiration", e);
        }
    }


    public String extractUsername(String token) {
        try {
            System.out.println("Extracting username from token: " + token);
            Claims claims = extractClaims(token);
            String username = claims.getSubject();
            System.out.println("Extracted username: " + username);
            return username; // Return username (subject)
        } catch (Exception e) {
            System.err.println("Error while extracting username: " + e.getMessage());
            throw new RuntimeException("Error extracting username", e);
        }
    }


    public List<SimpleGrantedAuthority> extractRoles(String token) {
        try {
            Claims claims = extractClaims(token);
            List<String> roles = (List<String>) claims.get("roles");
            return roles.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList());
        } catch (Exception e) {
            throw new RuntimeException("Error extracting roles", e);
        }
    }


    public List<SimpleGrantedAuthority> getAuthoritiesFromRoles(String[] roles) {
        return Arrays.stream(roles).map(SimpleGrantedAuthority::new).collect(Collectors.toList());
    }

    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public Claims extractClaims(String token) {
        try {
            System.out.println("Extracting claims from token: " + token);
            return Jwts.parserBuilder()
                    .setSigningKey(secretKey)
                    .build()
                    .parseClaimsJws(token)
                    .getBody();
        } catch (Exception e) {
            System.err.println("Error parsing token: " + token + " | Error: " + e.getMessage());
            throw new RuntimeException("Error extracting claims from token", e);
        }
    }

}

