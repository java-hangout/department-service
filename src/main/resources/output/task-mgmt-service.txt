### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\config\SecurityConfig.java ###
package com.jh.tds.tms.config;

import com.jh.tds.tms.util.JwtAuthenticationFilter;
import com.jh.tds.tms.util.JwtUtil;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;


@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final JwtUtil jwtUtil;

    public SecurityConfig(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    // Bean for Password Encoder
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // AuthenticationManager bean for authentication
    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        return http.getSharedObject(AuthenticationManagerBuilder.class).build();
    }

    // HTTP security configuration to secure endpoints
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)  // Disable CSRF explicitly in Spring Security 6.x
                .authorizeHttpRequests(authz -> authz
                        .requestMatchers("/api/tasks/**").permitAll() // Allow access to authentication routes
                        .anyRequest().authenticated() // All other requests must be authenticated
                )
                .addFilterBefore(new JwtAuthenticationFilter(jwtUtil), UsernamePasswordAuthenticationFilter.class); // Adding JWT filter before UsernamePasswordAuthenticationFilter

        return http.build();
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\config\SwaggerConfig.java ###
package com.jh.tds.tms.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Task Service API")
                        .version("1.0")
                        .description("API documentation for the Task service"));
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\controller\TaskController.java ###
package com.jh.tds.tms.controller;

import com.jh.tds.tms.model.Task;
import com.jh.tds.tms.service.TaskService;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tasks")
@Tag(name = "Task Management", description = "Endpoints for managing tasks")
public class TaskController {

    @Autowired
    private TaskService taskService;

    @PostMapping("/create")
    public Task createTask(@RequestBody Task task) {
        return taskService.createTask(task);
    }

    @GetMapping("/fetch/{id}")
    public Task getTaskById(@PathVariable String id) {
        return taskService.getTaskById(id);
    }

    @GetMapping("/fetch/all")
    public List<Task> getAllTasks() {
        return taskService.getAllTasks();
    }

    @PutMapping("/update/{id}")
    public Task updateTask(@PathVariable String id, @RequestBody Task task) {
        return taskService.updateTask(id, task);
    }

    @DeleteMapping("/delete/{id}")
    public void deleteTask(@PathVariable String id) {
        taskService.deleteTask(id);
    }

    @GetMapping("/assignedTo/{userId}")
    public List<Task> getTasksByAssignedToUserId(@PathVariable String userId) {
        return taskService.getTasksByAssignedToUserId(userId);
    }

    @GetMapping("/department/{departmentId}")
    public List<Task> getTasksByDepartmentId(@PathVariable String departmentId) {
        return taskService.getTasksByDepartmentId(departmentId);
    }

    @GetMapping("/status/{status}")
    public List<Task> getTasksByStatus(@PathVariable String status) {
        return taskService.getTasksByStatus(status);
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\model\Sequence.java ###
package com.jh.tds.tms.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "sequences")
public class Sequence {
    @Id
    private String id;
    private int seq;

    // Getters and Setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public int getSeq() {
        return seq;
    }

    public void setSeq(int seq) {
        this.seq = seq;
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\model\Task.java ###
package com.jh.tds.tms.model;

import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Date;

@Setter
@Getter
@Document(collection = "tasks")
public class Task {

    @Id
    private String id;                     // Unique task ID
    private String title;                  // Task title
    private String description;            // Task description
    private String assignedToUserId;       // Reference to the user who is assigned the task (Many-to-One)
    private String departmentId;           // Reference to the department the task belongs to (Many-to-One)
    private Date dueDate = new Date();                  // Due date for the task
    private String status;                 // Status of the task (e.g., "Open", "In Development", "Completed")
    private String priority;               // Priority of the task (e.g., "High", "Medium", "Low")

}


### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\registry\SequenceRepository.java ###
package com.jh.tds.tms.registry;

import com.jh.tds.tms.model.Sequence;
import org.springframework.data.mongodb.repository.MongoRepository;

public interface SequenceRepository extends MongoRepository<Sequence, String> {
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\registry\TaskRepository.java ###
package com.jh.tds.tms.registry;

import com.jh.tds.tms.model.Task;
import org.springframework.data.mongodb.repository.MongoRepository;

import java.util.List;

public interface TaskRepository extends MongoRepository<Task, String> {
    List<Task> findByAssignedToUserId(String userId);
    List<Task> findByDepartmentId(String departmentId);
    List<Task> findByStatus(String status);
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\service\SequenceGeneratorService.java ###
package com.jh.tds.tms.service;

import com.jh.tds.tms.registry.SequenceRepository;
import com.jh.tds.tms.model.Sequence;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class SequenceGeneratorService {

    @Autowired
    private SequenceRepository sequenceRepository;

    private static final String SEQUENCE_NAME = "task_sequence";

    public String generateTaskId() {
        // Retrieve the current sequence or create a new one if it doesn't exist
      Sequence sequence = sequenceRepository.findById(SEQUENCE_NAME).orElseGet(this::createNewSequence);

        // Generate the task ID based on the current sequence
        int currentSeq = sequence.getSeq();

        // Generate the task ID (starting from task_0001, task_0002, etc.)
        String generatedId = String.format("task_%04d", currentSeq);

        // Increment the sequence counter for future tasks
        sequence.setSeq(currentSeq + 1);

        // Save the updated sequence value to the database
        sequenceRepository.save(sequence);

        // Return the generated task ID
        return generatedId;
    }

    private Sequence createNewSequence() {
        Sequence sequence = new Sequence();
        sequence.setId(SEQUENCE_NAME);
        sequence.setSeq(1);  // Start from task_0001
        return sequenceRepository.save(sequence);
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\service\TaskService.java ###
package com.jh.tds.tms.service;

import com.jh.tds.tms.model.Task;
import com.jh.tds.tms.registry.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TaskService {

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private SequenceGeneratorService sequenceGeneratorService;

    public Task createTask(Task task) {
        // Generate a custom ID for the task
        task.setId(sequenceGeneratorService.generateTaskId());
        return taskRepository.save(task);
    }

    public Task getTaskById(String id) {
        return taskRepository.findById(id).orElse(null);
    }

    public List<Task> getAllTasks() {
        return taskRepository.findAll();
    }

    public Task updateTask(String id, Task task) {
        if (taskRepository.existsById(id)) {
            task.setId(id);
            return taskRepository.save(task);
        }
        return null;
    }

    public void deleteTask(String id) {
        taskRepository.deleteById(id);
    }

    public List<Task> getTasksByAssignedToUserId(String userId) {
        return taskRepository.findByAssignedToUserId(userId);
    }

    public List<Task> getTasksByDepartmentId(String departmentId) {
        return taskRepository.findByDepartmentId(departmentId);
    }

    public List<Task> getTasksByStatus(String status) {
        return taskRepository.findByStatus(status);
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\TaskMgmtServiceApplication.java ###
package com.jh.tds.tms;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TaskMgmtServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(TaskMgmtServiceApplication.class, args);
	}

}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\util\JwtAuthenticationFilter.java ###
package com.jh.tds.tms.util;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;

    public JwtAuthenticationFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String path = request.getRequestURI();
        System.out.println("Task service ===>>>> Processing request for path: " + path);


        /*String token = request.getHeader("Authorization");
        System.out.println("token --->>> " + token);
        if (token != null && token.startsWith("Bearer ")) {
            System.out.println("token --->>> 222 " + token);
//            token = token.substring(7); // Remove "Bearer " prefix
            token = token.split(" ")[1].trim();*/
        String token = extractToken(request);
        if (token == null || !jwtUtil.validateToken(token)) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // Unauthorized response for invalid token
            response.getWriter().write("Invalid or missing token");
            return;
        }
//        if (token != null && jwtUtil.validateToken(token)) {
        String username = jwtUtil.extractUsername(token);
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            var authentication = new UsernamePasswordAuthenticationToken(username, null, jwtUtil.extractRoles(token));
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }
            /*String[] roles = jwtUtil.extractRoles(token);  // Extract roles from the token

//            if (username != null && jwtUtil.validateToken(token, username)) {
//            if (token != null && jwtUtil.validateToken(token)) {
                // Create authentication token and set it in SecurityContext
                *//*UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                        username, null, new ArrayList<>()
                );*//*
                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                        username, null, jwtUtil.getAuthoritiesFromRoles(roles)
                );
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authentication);*/
//        }
//        }

        filterChain.doFilter(request, response);  // Proceed to the next filter in the chain
    }

    // Extract token from Authorization header
    private String extractToken(HttpServletRequest request) {
        String header = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (header != null && header.startsWith("Bearer ")) {
//            return header.substring(7);  // Remove "Bearer " prefix
//            return header.substring(7).trim();
            return header.split(" ")[1].trim();
        }
        return null;
    }
}

### Contents of D:\OSBI\workspace\task-mgmt-service\src\main\java\com\jh\tds\tms\util\JwtUtil.java ###
package com.jh.tds.tms.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JwtUtil {
    //    @Value("${jwt.secret}")
    private String SECRET_KEY = "sh2+3JRuzIaVMCGxBPeDMSzUFwDBLscv4R77LYntGns=";
    private Key secretKey = Keys.hmacShaKeyFor(Base64.getDecoder().decode(SECRET_KEY));
    // Secure key for HS256 algorithm using JJWT's Keys utility (recommended approach)
//    private Key secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256); // Generates a secure key for HS256
//private Key secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    private long expirationTime = 1000 * 60 * 60; // 1 hour in milliseconds

    // Generate a JWT token with the given username
    public String generateToken(String username, List<SimpleGrantedAuthority> authorities) {
        System.out.println("generateToken --->>> " + username);
//        System.out.println("SECRET_KEY --->>> " + SECRET_KEY);
        System.out.println("secretKey --->>> " + secretKey);
        Claims claims = Jwts.claims().setSubject(username);
        claims.put("roles", authorities.stream().map(SimpleGrantedAuthority::getAuthority).collect(Collectors.toList()));
        return Jwts.builder()
                .setClaims(claims)
//                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expirationTime))
                .signWith(secretKey)  // Use the generated secure key to sign the token
                .compact();
    }


    // Extract the username (subject) from the JWT token
    public String extractUsername(String token) {
        return extractClaims(token).getSubject(); // The subject is typically the username
    }

    /*public String[] extractRoles(String token) {
        Claims claims = extractClaims(token);
        List<String> roles = (List<String>) claims.get("roles");
        return roles.toArray(new String[0]);
    }*/
    public List<SimpleGrantedAuthority> extractRoles(String token) {
        Claims claims = extractClaims(token);
        List<String> roles = (List<String>) claims.get("roles");
        return roles.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList());
    }

    // Check if the token is expired
    public boolean isTokenExpired(String token) {
        return extractClaims(token).getExpiration().before(new Date());  // Compare token expiration with current time
    }

    /*// Validate the JWT token by comparing username and expiration status
    public boolean validateToken(String token, String username) {
        return (username.equals(extractUsername(token)) && !isTokenExpired(token));  // Ensure the username matches and token isn't expired
    }*/
    public List<SimpleGrantedAuthority> getAuthoritiesFromRoles(String[] roles) {
        return Arrays.stream(roles)
                .map(role -> new SimpleGrantedAuthority(role))
                .collect(Collectors.toList());
    }

    /*public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }*/

    public boolean validateToken(String token) {
        try {
            Claims claims = extractClaims(token);
            return !isTokenExpired(token);
        } catch (Exception e) {
            return false;
        }
    }

    // Extract claims (payload) from the JWT token
    public Claims extractClaims(String token) {
        return Jwts.parserBuilder()  // Use parserBuilder() as per newer JJWT versions
                .setSigningKey(secretKey)  // Set the same key to validate the token
                .build()
                .parseClaimsJws(token)
                .getBody();  // Extract and return claims from the JWT
    }
}

